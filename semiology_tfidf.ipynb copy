{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4661ee00",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import re\n",
    "from sklearn.metrics import roc_curve, auc\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.datasets import make_classification\n",
    "from imblearn.over_sampling import SMOTE\n",
    "from sklearn.model_selection import train_test_split\n",
    "from collections import Counter\n",
    "from sklearn.metrics import confusion_matrix, balanced_accuracy_score\n",
    "import seaborn as sns\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.decomposition import PCA\n",
    "from sklearn.datasets import load_iris\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from sklearn.model_selection import GridSearchCV\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "91c4a3d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define preprocessing functions\n",
    "\n",
    "# General preprocessing\n",
    "def preprocess_text(text):\n",
    "    \n",
    "    # Convert text to lowercase\n",
    "    text = text.lower()\n",
    "    \n",
    "    # remove a special thing\n",
    "    text = re.sub(r'&gt;',' ',text)\n",
    "    \n",
    "    # remove semicolons, ampersands\n",
    "    text = re.sub(r'[&;-]', ' ', text)\n",
    "    \n",
    "    # Remove punctuation and special characters\n",
    "    text = re.sub(r'[^\\w\\s]', ' ', text)\n",
    "    \n",
    "    # Remove numbers\n",
    "    text = re.sub(r'\\d+', '', text)\n",
    "    \n",
    "    # other weird stuff to remove\n",
    "    text = re.sub(r'\\xa0',' ',text)\n",
    "    \n",
    "    # other weird stuff to remove\n",
    "    text = re.sub(r'including aura',' ',text)\n",
    "    \n",
    "    start_index = text.find('description of emu evaluation')\n",
    "    # If the phrase is found, remove it along with the subsequent characters\n",
    "    if start_index != -1:\n",
    "        text = text[:start_index]\n",
    "    \n",
    "    return text\n",
    "\n",
    "# Extract just the semiology bits from the templates\n",
    "def extract_only_semiology(text):\n",
    "    \n",
    "    # flexible here\n",
    "    text = re.sub('subjective semiology (including aura)','subjective semiology',text)\n",
    "    \n",
    "    sub_pattern = re.compile(r\"(?<=subjective semiology)(.*?)(?=witnesses report)\", re.DOTALL)\n",
    "    sub_matches = sub_pattern.findall(text)\n",
    "    \n",
    "    wit_pattern = re.compile(r\"(?<=witnesses report)(.*?)(?=duration)\", re.DOTALL)\n",
    "    wit_matches = wit_pattern.findall(text)\n",
    "    \n",
    "    dur_pattern = re.compile(r\"(?<=duration)(.*?)(?=postictal)\", re.DOTALL)\n",
    "    dur_matches = dur_pattern.findall(text)\n",
    "    \n",
    "    post_pattern = re.compile(r\"(?<=postictal)(.*?)(?=tongue biting)\", re.DOTALL)\n",
    "    post_matches = post_pattern.findall(text)\n",
    "    \n",
    "    if wit_matches or sub_matches or dur_matches or post_matches:\n",
    "        concatenated_text = ' '.join(sub_matches) + ' '.join(wit_matches) + ' '.join(dur_matches) + ' '.join(post_matches)\n",
    "        return concatenated_text\n",
    "    else:\n",
    "        return text\n",
    "    \n",
    "# Other template\n",
    "def extract_only_semiology2(text):\n",
    "    \n",
    "    \n",
    "    sub_pattern = re.compile(r\"(?<=event description)(.*?)(?=age at onset)\", re.DOTALL)\n",
    "    sub_matches = sub_pattern.findall(text)\n",
    "    \n",
    "    wit_pattern = re.compile(r\"(?<=seizure description)(.*?)(?=age at onset)\", re.DOTALL)\n",
    "    wit_matches = wit_pattern.findall(text)\n",
    "    \n",
    "    if wit_matches or sub_matches:\n",
    "        concatenated_text = ' '.join(sub_matches) + ' '.join(wit_matches)\n",
    "        return concatenated_text\n",
    "    else:\n",
    "        return text\n",
    "    \n",
    "def remove_extra_spaces(text):\n",
    "    # Split the text into words\n",
    "    words = text.split()\n",
    "    # Join the words back together with a single space between them\n",
    "    cleaned_text = ' '.join(words)\n",
    "    # Remove any remaining extra spaces and newlines\n",
    "    cleaned_text = cleaned_text.replace('\\n', ' ')\n",
    "    return cleaned_text\n",
    "\n",
    "# Make a new censored_semiology which censors obvious seizure words\n",
    "def censor_text(text):\n",
    "    \n",
    "    phrases_to_replace = ['spells','spell','fias','seizures','episodes','episode','pnes','pnee','epileptic','events','event','seizure','fbtcs','btcs','btc','aura','gtc','postictal','ictal','fas']\n",
    "    \n",
    "    # Construct a regular expression pattern by joining the phrases with \"|\" to match any of them\n",
    "    pattern = '|'.join(re.escape(phrase) for phrase in phrases_to_replace)\n",
    "    \n",
    "    # Use the sub() function to replace matched phrases with an empty string\n",
    "    cleaned_text = re.sub(pattern, '', text)\n",
    "    \n",
    "    return cleaned_text"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e07d35b0",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/kc/k0vnmns51gx_9t0mb0x8x_7r0000gn/T/ipykernel_6511/3937296961.py:27: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df3['censored_semiology'] = df3['clean_semiology'].apply(censor_text)\n"
     ]
    }
   ],
   "source": [
    "# Load in and pre-process data\n",
    "\n",
    "# Load the CSV file into a DataFrame\n",
    "df1 = pd.read_csv('../data/erin_semiology.csv')\n",
    "\n",
    "# Handling missing values\n",
    "df1['semiology'] = df1['semiology'].fillna('')\n",
    "\n",
    "# Remove patients with non-matching last name\n",
    "df1 = df1[df1['matching_last_name'] == True]\n",
    "\n",
    "# Group by patient_id and aggregate semiology\n",
    "df2 = df1.groupby('patient_id')['semiology'].agg(lambda x: ' '.join(set(x))).reset_index()\n",
    "\n",
    "# Merge df2 with df1 to retain original columns\n",
    "df2 = pd.merge(df2, df1.drop_duplicates('patient_id'), on='patient_id', how='left')\n",
    "\n",
    "# apply all cleaning\n",
    "df2['clean_semiology'] = df2['semiology_x'].apply(preprocess_text)\n",
    "#df2['clean_semiology'] = df2['clean_semiology'].apply(extract_only_semiology)\n",
    "#df2['clean_semiology'] = df2['clean_semiology'].apply(extract_only_semiology2)\n",
    "df2['clean_semiology'] = df2['clean_semiology'].apply(remove_extra_spaces)\n",
    "\n",
    "df3 = df2[df2['clean_semiology'] != '']\n",
    "\n",
    "# Censor text\n",
    "df3['censored_semiology'] = df3['clean_semiology'].apply(censor_text)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ba54d5c9",
   "metadata": {},
   "outputs": [],
   "source": [
    "def case_epi():\n",
    "    pos_label = 'epilepsy'\n",
    "    neg_label = 'pnes'\n",
    "    column = 'single_diagnosis'\n",
    "    return pos_label, neg_label, column\n",
    "def case_loc():\n",
    "    pos_label = 'temporal'\n",
    "    neg_label = 'frontal'\n",
    "    column = 'single_loc'\n",
    "    return pos_label, neg_label, column\n",
    "def case_lat():\n",
    "    pos_label = 'left'\n",
    "    neg_label = 'right'\n",
    "    column = 'single_lat'\n",
    "    return pos_label, neg_label, column\n",
    "\n",
    "# The 'switch' dictionary\n",
    "switch_dict = {\n",
    "    1: case_epi,\n",
    "    2: case_loc,\n",
    "    3: case_lat,\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "11d1bcbc",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Restrict and make labels\n",
    "case_to_handle = 1\n",
    "pos_label, neg_label, column = switch_dict.get(case_to_handle, 1)()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f9510b9b",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/kc/k0vnmns51gx_9t0mb0x8x_7r0000gn/T/ipykernel_6511/1410150024.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  df4['labels'] = df4[column].apply(lambda x: 1 if x == pos_label else 0)\n"
     ]
    }
   ],
   "source": [
    "df4 = df3[df3[column].isin([pos_label,neg_label])]\n",
    "df4['labels'] = df4[column].apply(lambda x: 1 if x == pos_label else 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8da43371",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of positive labels is: 430\n",
      "Number of negative labels is: 132\n"
     ]
    }
   ],
   "source": [
    "df = df4\n",
    "\n",
    "num_pos = (df['labels'] == 1).sum()\n",
    "num_neg = (df['labels'] == 0).sum()\n",
    "print(\"Number of positive labels is:\",num_pos)\n",
    "print(\"Number of negative labels is:\",num_neg)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b6d43cc5",
   "metadata": {},
   "outputs": [],
   "source": [
    "def case_bow():\n",
    "    vectorizer = CountVectorizer()\n",
    "    return vectorizer\n",
    "def case_tfidf():\n",
    "    vectorizer = TfidfVectorizer(max_features=1000)\n",
    "    return vectorizer\n",
    "\n",
    "# The 'switch' dictionary\n",
    "switch_dict = {\n",
    "    1: case_bow,\n",
    "    2: case_tfidf,\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "1ec80905",
   "metadata": {},
   "outputs": [],
   "source": [
    "# decide vectorizer\n",
    "case_to_handle = 2\n",
    "vectorizer = switch_dict.get(case_to_handle,1)()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a39ea7ce",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Fit the vectorizer to the training data and transform it\n",
    "X = vectorizer.fit_transform(df['censored_semiology']).toarray()\n",
    "\n",
    "# Get the feature names (i.e., the vocabulary)\n",
    "feature_names = vectorizer.get_feature_names_out()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c85217d9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define y\n",
    "y = df['labels']\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "6c1653f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Split the data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "0027351e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Apply SMOTE\n",
    "sm = SMOTE()\n",
    "X_train_res, y_train_res = sm.fit_resample(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "fe6f95db",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(C=1, max_iter=1000, random_state=42, solver=&#x27;saga&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(C=1, max_iter=1000, random_state=42, solver=&#x27;saga&#x27;)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LogisticRegression(C=1, max_iter=1000, random_state=42, solver='saga')"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Train a logistic regression classifier\n",
    "log_reg = LogisticRegression(penalty='l2', C=1, solver='saga', max_iter=1000, random_state=42)\n",
    "log_reg.fit(X_train_res, y_train_res)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "c7e14934",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate predicted probabilities\n",
    "y_probs = log_reg.predict_proba(X_test)[:, 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "29fadf78",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Calculate the ROC curve\n",
    "fpr, tpr, thresholds = roc_curve(y_test, y_probs)\n",
    "\n",
    "# Calculate the area under the ROC curve\n",
    "roc_auc = auc(fpr, tpr)\n",
    "\n",
    "# Plot ROC curve\n",
    "plt.figure()\n",
    "plt.plot(fpr, tpr, color='blue', lw=2, label='ROC curve (area = %0.2f)' % roc_auc)\n",
    "plt.plot([0, 1], [0, 1], color='gray', linestyle='--')\n",
    "plt.xlim([0.0, 1.0])\n",
    "plt.ylim([0.0, 1.05])\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.title('Receiver Operating Characteristic (ROC) Curve')\n",
    "plt.legend(loc=\"lower right\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "e1d40959",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAqsAAAIhCAYAAABpMPNPAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy88F64QAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAqWUlEQVR4nO3debTVdb3/8deW4QAqKBAo5IhB4ARiEpYDTomGeq/zFKTikOVsXjTFtELIqyYqODAYmujP6ade82riVKKBoeaQXhWnlBS8DgEiwv794fL8PAF6wIPnIz4ea7GW+/v97u9+77MUn+t7Pvu7K9VqtRoAACjQSo09AAAALIlYBQCgWGIVAIBiiVUAAIolVgEAKJZYBQCgWGIVAIBiiVUAAIolVgEAKJZYBYr1+OOP54c//GHWW2+9tGjRIqussko222yzjBgxIm+99dZyfe1p06Zlm222SZs2bVKpVHLBBRc0+GtUKpWceeaZDX7ezzJ+/PhUKpVUKpXce++9i+yvVqvZYIMNUqlUsu222y7Ta1xyySUZP378Uj3n3nvvXeJMwFdX08YeAGBxLr/88vzoRz9Kt27dcvLJJ6dHjx6ZP39+pk6dmtGjR2fy5Mm56aabltvrH3LIIZk9e3YmTpyY1VdfPeuuu26Dv8bkyZPz9a9/vcHPW1+rrrpqxowZs0iQ3nfffXn++eez6qqrLvO5L7nkkrRv3z6DBg2q93M222yzTJ48OT169Fjm1wVWPGIVKM7kyZNz1FFHZccdd8zNN9+cmpqa2n077rhjTjzxxNxxxx3LdYYnnngigwcPTv/+/Zfba3z7299ebueuj3333TdXX311Lr744rRu3bp2+5gxY9K3b9+8++67X8gc8+fPT6VSSevWrRv9ZwKUxzIAoDi/+tWvUqlUctlll9UJ1Y81b948u+22W+3jhQsXZsSIEfnmN7+ZmpqadOjQIT/4wQ/y6quv1nnetttum4022ihTpkzJVlttlVatWmX99dfPOeeck4ULFyb5/78i//DDDzNq1KjaX5cnyZlnnln7z5/08XNefPHF2m2TJk3Ktttum3bt2qVly5ZZe+21s+eee2bOnDm1xyxuGcATTzyR3XffPauvvnpatGiRnj175sorr6xzzMe/Lr/mmmty2mmnpVOnTmndunV22GGHPPPMM/X7ISfZf//9kyTXXHNN7bZ33nknN9xwQw455JDFPufnP/95+vTpk7Zt26Z169bZbLPNMmbMmFSr1dpj1l133Tz55JO57777an9+H1+Z/nj2CRMm5MQTT0znzp1TU1OT5557bpFlADNnzsxaa62VLbfcMvPnz689/1NPPZWVV145Bx98cL3fK/DlJVaBoixYsCCTJk1K7969s9Zaa9XrOUcddVROOeWU7Ljjjrnlllty9tln54477siWW26ZmTNn1jl2xowZOfDAA3PQQQfllltuSf/+/TNkyJBcddVVSZJdd901kydPTpLstddemTx5cu3j+nrxxRez6667pnnz5hk7dmzuuOOOnHPOOVl55ZXzwQcfLPF5zzzzTLbccss8+eSTufDCC3PjjTemR48eGTRoUEaMGLHI8aeeempeeumlXHHFFbnsssvyP//zPxkwYEAWLFhQrzlbt26dvfbaK2PHjq3dds0112SllVbKvvvuu8T3dsQRR+S6667LjTfemH//93/PT37yk5x99tm1x9x0001Zf/3106tXr9qf378u2RgyZEhefvnljB49Orfeems6dOiwyGu1b98+EydOzJQpU3LKKackSebMmZO99947a6+9dkaPHl2v9wl8yVUBCjJjxoxqkup+++1Xr+OffvrpapLqj370ozrbH3744WqS6qmnnlq7bZtttqkmqT788MN1ju3Ro0f1e9/7Xp1tSapHH310nW1Dhw6tLu6vzXHjxlWTVKdPn16tVqvV66+/vpqk+uijj37q7EmqQ4cOrX283377VWtqaqovv/xyneP69+9fbdWqVfXtt9+uVqvV6j333FNNUt1ll13qHHfddddVk1QnT578qa/78bxTpkypPdcTTzxRrVar1W9961vVQYMGVavVanXDDTesbrPNNks8z4IFC6rz58+vnnXWWdV27dpVFy5cWLtvSc/9+PW23nrrJe6755576mwfPnx4NUn1pptuqg4cOLDasmXL6uOPP/6p7xFYcbiyCnyp3XPPPUmyyAd5tthii3Tv3j133313ne1rrLFGtthiizrbNtlkk7z00ksNNlPPnj3TvHnzHH744bnyyivzwgsv1Ot5kyZNyvbbb7/IFeVBgwZlzpw5i1zh/eRSiOSj95Fkqd7LNttsky5dumTs2LH561//milTpixxCcDHM+6www5p06ZNmjRpkmbNmuWMM87IrFmz8sYbb9T7dffcc896H3vyySdn1113zf77758rr7wyI0eOzMYbb1zv5wNfbmIVKEr79u3TqlWrTJ8+vV7Hz5o1K0my5pprLrKvU6dOtfs/1q5du0WOq6mpydy5c5dh2sXr0qVL/vCHP6RDhw45+uij06VLl3Tp0iW/+c1vPvV5s2bNWuL7+Hj/J/3re/l4fe/SvJdKpZIf/vCHueqqqzJ69Oh07do1W2211WKP/fOf/5yddtopyUd3a/jTn/6UKVOm5LTTTlvq113c+/y0GQcNGpT3338/a6yxhrWq8BUjVoGiNGnSJNtvv30eeeSRRT4gtTgfB9vrr7++yL7XXnst7du3b7DZWrRokSSZN29ene3/ui42Sbbaaqvceuuteeedd/LQQw+lb9++Oe644zJx4sQlnr9du3ZLfB9JGvS9fNKgQYMyc+bMjB49Oj/84Q+XeNzEiRPTrFmz3Hbbbdlnn32y5ZZbZvPNN1+m11zcB9WW5PXXX8/RRx+dnj17ZtasWTnppJOW6TWBLyexChRnyJAhqVarGTx48GI/kDR//vzceuutSZLtttsuSWo/IPWxKVOm5Omnn87222/fYHN9/In2xx9/vM72j2dZnCZNmqRPnz65+OKLkyR/+ctflnjs9ttvn0mTJtXG6cd++9vfplWrVsvttk6dO3fOySefnAEDBmTgwIFLPK5SqaRp06Zp0qRJ7ba5c+dmwoQJixzbUFerFyxYkP333z+VSiW///3vM2zYsIwcOTI33njj5z438OXgPqtAcfr27ZtRo0blRz/6UXr37p2jjjoqG264YebPn59p06blsssuy0YbbZQBAwakW7duOfzwwzNy5MistNJK6d+/f1588cWcfvrpWWuttXL88cc32Fy77LJL2rZtm0MPPTRnnXVWmjZtmvHjx+eVV16pc9zo0aMzadKk7Lrrrll77bXz/vvv137ifocddlji+YcOHZrbbrst/fr1yxlnnJG2bdvm6quvzn/9139lxIgRadOmTYO9l391zjnnfOYxu+66a84777wccMABOfzwwzNr1qyce+65i7292MYbb5yJEyfm2muvzfrrr58WLVos0zrToUOH5oEHHsidd96ZNdZYIyeeeGLuu+++HHrooenVq1fWW2+9pT4n8OUiVoEiDR48OFtssUXOP//8DB8+PDNmzEizZs3StWvXHHDAAfnxj39ce+yo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rE4//fTsueeeef7557PddtslSe6+++787ne/y/XXX9/gAwIA8NW11LG622675eabb86vfvWrXH/99WnZsmU23XTTTJo0Ka1bt14eMwIA8BVVqS7p+1Pr6e23387VV1+dMWPG5LHHHsuCBQsaarZl9v6HjT0BQMNa/Vs/buwRABrU3GkX1eu4pV6z+rFJkybloIMOSqdOnXLRRRdll112ydSpU5f1dAAAsIilWgbw6quvZvz48Rk7dmxmz56dffbZJ/Pnz88NN9zgw1UAADS4el9Z3WWXXdKjR4889dRTGTlyZF577bWMHDlyec4GAMBXXL2vrN5555055phjctRRR+Ub3/jG8pwJAACSLMWV1QceeCDvvfdeNt988/Tp0ycXXXRR3nzzzeU5GwAAX3H1jtW+ffvm8ssvz+uvv54jjjgiEydOTOfOnbNw4cLcddddee+995bnnAAAfAV9rltXPfPMMxkzZkwmTJiQt99+OzvuuGNuueWWhpxvmbh1FbCicesqYEWz3G9dlSTdunXLiBEj8uqrr+aaa675PKcCAIBFfO4vBSiRK6vAisaVVWBF84VcWQUAgOVJrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCp/hkalT8pMfHZkdtv1uNt2wWybd/Yc6+0ddPDK7f3/n9Nm8Z77b91s5/NBBefzxxxppWoBFfWezLrn+giPywp2/zNxpF2XAtpvU2b/7dpvmlouPziuTzsncaRdlk66dFzlHx3arZszZP8j0u36VmQ/+Zx783Sn5tx16fkHvgK8ysQqfYe7cOenWrVv+47QzFrt/nXXWzZDTzsgNN92a8RN+l06dO+eowYfkrbfe+oInBVi8lVvW5K/P/j3Hn3PdYve3atk8kx97PqeP/L9LPMeYXwxM13U7ZO/jLs3me/8q/3fSo5lwziHZtNvXl9fYkCRp2tgDQOm+u9U2+e5W2yxx/y7fH1Dn8Uk/HZKbbrg+//PsM+nz7b7LezyAz3Tnn57KnX96aon7r/mvKUmStddsu8Rj+myyXo751cRMffKlJMnwK/47Pzlwu/TsvlYee+bVhh0YPsGVVWhA8z/4IDf8n2uz6qqrpmu3bo09DkCDeXDa89lrp95ZvXWrVCqV7P293qlp3jT3T/2fxh6NFVzRV1ZfeeWVDB06NGPHjl3iMfPmzcu8efPqbKs2qUlNTc3yHg9q3XfvPTnlpBPy/vtz0/5rX8voy8dm9dWXfIUC4Mvm4P8YmwnnHJLX7huR+fMXZM77H2TfEy7P9FdnNvZorOCKvrL61ltv5corr/zUY4YNG5Y2bdrU+fPr4cO+oAnhI9/aok+uu+Hm/PbqifnOd7fKyScel1mzZjX2WAAN5syjB2T11q3S/4gL852DRuTCqybl6l8fkg036NTYo7GCa9Qrq7fccsun7n/hhRc+8xxDhgzJCSecUGdbtYmrqnyxWrVqlbXXWSdrr7NONtm0Zwb03yk333h9Dh18RGOPBvC5rff19jlqv22y2Z6/yNMvzEiS/PXZv+c7m3XJEftunWN+ObGRJ2RF1qixuscee6RSqaRarS7xmEql8qnnqKlZ9Ff+73/YIOPBMqtWq/nggw8aewyABtGqRfMkycJ/+f/1ggXVrPQZ/5+Gz6tRlwGsueaaueGGG7Jw4cLF/vnLX/7SmONBkmTO7Nn529NP529PP50k+furr+ZvTz+d1197LXPmzMmFF5yXxx97NK+99vc8/dSTOfOM0/KPf8zIjt/buZEnB/jIyi2bZ5OunWvvn7pu53bZpGvnrLXG6kmS1Vu3yiZdO6d7lzWSJF3X7ZhNunZOx3arJkmeeXFGnnv5jVz0s/2z+YbrZL2vt8+xB2+X7b/dLbfe677SLF+V6qdd1lzOdtttt/Ts2TNnnXXWYvc/9thj6dWrVxYuXLhU53VllYY05c8P57Af/mCR7bvt/m/52dCf5z9+emL++vhjeft//zerrbZaNtxo4ww+4qhstPEmizkbLJvVv/Xjxh6BL7Gten8jd15x7CLbJ9zyUA4felUOGtAnl5918CL7fzH69vzy0tuTJF3W/lp+cczu6dtz/azSqibPv/JmLvjt3bW3vYKlNXfaRfU6rlFj9YEHHsjs2bOz886LvwI1e/bsTJ06Ndtss+R7XC6OWAVWNGIVWNF8KWJ1eRGrwIpGrAIrmvrGatG3rgIA4KtNrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABRLrAIAUCyxCgBAscQqAADFEqsAABSrUq1Wq409BHwZzZs3L8OGDcuQIUNSU1PT2OMAfG7+XqNEYhWW0bvvvps2bdrknXfeSevWrRt7HIDPzd9rlMgyAAAAiiVWAQAollgFAKBYYhWWUU1NTYYOHepDCMAKw99rlMgHrAAAKJYrqwAAFEusAgBQLLEKAECxxCoAAMUSq7CMLrnkkqy33npp0aJFevfunQceeKCxRwJYJvfff38GDBiQTp06pVKp5Oabb27skaCWWIVlcO211+a4447LaaedlmnTpmWrrbZK//798/LLLzf2aABLbfbs2dl0001z0UUXNfYosAi3roJl0KdPn2y22WYZNWpU7bbu3btnjz32yLBhwxpxMoDPp1Kp5Kabbsoee+zR2KNAEldWYal98MEHeeSRR7LTTjvV2b7TTjvlwQcfbKSpAGDFJFZhKc2cOTMLFixIx44d62zv2LFjZsyY0UhTAcCKSazCMqpUKnUeV6vVRbYBAJ+PWIWl1L59+zRp0mSRq6hvvPHGIldbAYDPR6zCUmrevHl69+6du+66q872u+66K1tuuWUjTQUAK6amjT0AfBmdcMIJOfjgg7P55punb9++ueyyy/Lyyy/nyCOPbOzRAJbaP//5zzz33HO1j6dPn55HH300bdu2zdprr92Ik4FbV8Eyu+SSSzJixIi8/vrr2WijjXL++edn6623buyxAJbavffem379+i2yfeDAgRk/fvwXPxB8glgFAKBY1qwCAFAssQoAQLHEKgAAxRKrAAAUS6wCAFAssQoAQLHEKgAAxRKrAAAUS6wCFObMM89Mz549ax8PGjQoe+yxxxc+x4svvphKpZJHH330C39tgI+JVYB6GjRoUCqVSiqVSpo1a5b1118/J510UmbPnr1cX/c3v/lNvb/yUmACK5qmjT0AwJfJzjvvnHHjxmX+/Pl54IEHcthhh2X27NkZNWpUnePmz5+fZs2aNchrtmnTpkHOA/Bl5MoqwFKoqanJGmuskbXWWisHHHBADjzwwNx88821v7ofO3Zs1l9//dTU1KRareadd97J4Ycfng4dOqR169bZbrvt8thjj9U55znnnJOOHTtm1VVXzaGHHpr333+/zv5/XQawcOHCDB8+PBtssEFqamqy9tpr55e//GWSZL311kuS9OrVK5VKJdtuu23t88aNG5fu3bunRYsW+eY3v5lLLrmkzuv8+c9/Tq9evdKiRYtsvvnmmTZtWgP+5ACWjSurAJ9Dy5YtM3/+/CTJc889l+uuuy433HBDmjRpkiTZdddd07Zt29x+++1p06ZNLr300my//fZ59tln07Zt21x33XUZOnRoLr744my11VaZMGFCLrzwwqy//vpLfM0hQ4bk8ssvz/nnn5/vfve7ef311/O3v/0tyUfBucUWW+QPf/hDNtxwwzRv3jxJcvnll2fo0KG56KKL0qtXr0ybNi2DBw/OyiuvnIEDB2b27Nn5/ve/n+222y5XXXVVpk+fnmOPPXY5//QA6qEKQL0MHDiwuvvuu9c+fvjhh6vt2rWr7rPPPtWhQ4dWmzVrVn3jjTdq9999993V1q1bV99///065+nSpUv10ksvrVar1Wrfvn2rRx55ZJ39ffr0qW666aaLfd133323WlNTU7388ssXO+P06dOrSarTpk2rs32ttdaq/u53v6uz7eyzz6727du3Wq1Wq5deemm1bdu21dmzZ9fuHzVq1GLPBfBFsgwAYCncdtttWWWVVdKiRYv07ds3W2+9dUaOHJkkWWeddfK1r32t9thHHnkk//znP9OuXbusssoqtX+mT5+e559/Pkny9NNPp2/fvnVe418ff9LTTz+defPmZfvtt6/3zG+++WZeeeWVHHrooXXm+MUvflFnjk033TStWrWq1xwAXxTLAACWQr9+/TJq1Kg0a9YsnTp1qvMhqpVXXrnOsQsXLsyaa66Ze++9d5HzrLbaasv0+i1btlzq5yxcuDDJR0sB+vTpU2ffx8sVqtXqMs0DsLyJVYClsPLKK2eDDTao17GbbbZZZsyYkaZNm2bddddd7DHdu3fPQw89lB/84Ae12x566KElnvMb3/hGWrZsmbvvvjuHHXbYIvs/XqO6YMGC2m0dO3ZM586d88ILL+TAAw9c7Hl79OiRCRMmZO7cubVB/GlzAHxRLAMAWE522GGH9O3bN3vssUf++7//Oy+++GIefPDB/OxnP8vUqVOTJMcee2zGjh2bsWPH5tlnn83QoUPz5JNPLvGcLVq0yCmnnJKf/vSn+e1vf5vnn38+Dz30UMaMGZMk6dChQ1q2bJk77rgj//jHP/LOO+8k+eiLBoYNG5bf/OY3efbZZ/PXv/4148aNy3nnnZckOeCAA7LSSivl0EMPzVNPPZXbb78955577nL+CQF8NrEKsJxUKpXcfvvt2XrrrXPIIYeka9eu2W+//fLiiy+mY8eOSZJ99903Z5xxRk455ZT07t07L730Uo466qhPPe/pp5+eE088MWeccUa6d++efffdN2+88UaSpGnTprnwwgtz6aWXplOnTtl9992TJIcddliuuOKKjB8/PhtvvHG22WabjB8/vvZWV6usskpuvfXWPPXUU+nVq1dOO+20DB8+fDn+dADqp1K1UAkAgEK5sgoAQLHEKgAAxRKrAAAUS6wCAFAssQoAQLHEKgAAxRKrAAAUS6wCAFAssQoAQLHEKgAAxRKrAAAU6/8BcLMoBjwQHB4AAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Balanced Accuracy: 0.713539574126155\n"
     ]
    }
   ],
   "source": [
    "# Predict classes\n",
    "y_pred = log_reg.predict(X_test)\n",
    "\n",
    "# Create confusion matrix\n",
    "conf_matrix = confusion_matrix(y_test, y_pred)\n",
    "tn, fp, fn, tp = conf_matrix.ravel()\n",
    "\n",
    "# Calculate Balanced Accuracy\n",
    "balanced_accuracy = balanced_accuracy_score(y_test, y_pred)\n",
    "\n",
    "# Plot confusion matrix\n",
    "plt.figure(figsize=(8, 6))\n",
    "sns.heatmap(conf_matrix, annot=True, fmt=\"d\", cmap=\"Blues\", cbar=False)\n",
    "plt.title('Confusion Matrix')\n",
    "plt.xlabel('Predicted')\n",
    "plt.ylabel('Actual')\n",
    "plt.show()\n",
    "\n",
    "print(\"Balanced Accuracy:\", balanced_accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "6ecfd68e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Top 10 features pointing towards class 1:\n",
      "none (Coefficient: 1.2728)\n",
      "automatisms (Coefficient: 1.1478)\n",
      "right (Coefficient: 1.1332)\n",
      "convulsion (Coefficient: 1.1289)\n",
      "vu (Coefficient: 1.1151)\n",
      "then (Coefficient: 1.1006)\n",
      "months (Coefficient: 1.0094)\n",
      "behavioral (Coefficient: 0.9894)\n",
      "convulsive (Coefficient: 0.9334)\n",
      "urinary (Coefficient: 0.9320)\n",
      "focal (Coefficient: 0.8970)\n",
      "deja (Coefficient: 0.8424)\n",
      "minute (Coefficient: 0.7787)\n",
      "he (Coefficient: 0.7760)\n",
      "these (Coefficient: 0.7653)\n",
      "occurs (Coefficient: 0.7468)\n",
      "anxiety (Coefficient: 0.7446)\n",
      "lasts (Coefficient: 0.7380)\n",
      "rare (Coefficient: 0.7117)\n",
      "in (Coefficient: 0.7102)\n",
      "\n",
      "Top 10 features pointing towards class 0:\n",
      "body (Coefficient: -2.0271)\n",
      "side (Coefficient: -1.7403)\n",
      "shaking (Coefficient: -1.5066)\n",
      "may (Coefficient: -1.4993)\n",
      "retained (Coefficient: -1.3911)\n",
      "stuttering (Coefficient: -1.3129)\n",
      "speech (Coefficient: -1.2380)\n",
      "whole (Coefficient: -1.1707)\n",
      "or (Coefficient: -1.1264)\n",
      "multiple (Coefficient: -1.1247)\n",
      "bowel (Coefficient: -1.0846)\n",
      "feels (Coefficient: -1.0746)\n",
      "by (Coefficient: -1.0202)\n",
      "has (Coefficient: -1.0128)\n",
      "vision (Coefficient: -1.0001)\n",
      "description (Coefficient: -0.9607)\n",
      "slurred (Coefficient: -0.9295)\n",
      "times (Coefficient: -0.9227)\n",
      "will (Coefficient: -0.9106)\n",
      "talking (Coefficient: -0.8750)\n"
     ]
    }
   ],
   "source": [
    "# Get the coefficients for each class\n",
    "coefficients = log_reg.coef_[0]  # Extract coefficients for the binary classification\n",
    "\n",
    "# Separate features pointing towards class 1 and class 0\n",
    "features_class_1 = np.argsort(coefficients)[-20:]  # Top 10 features pointing towards class 1\n",
    "features_class_0 = np.argsort(coefficients)[:20]   # Top 10 features pointing towards class 0\n",
    "\n",
    "print(\"Top 10 features pointing towards class 1:\")\n",
    "for idx in reversed(features_class_1):  # Reverse to show the highest first\n",
    "    print(f\"{feature_names[idx]} (Coefficient: {coefficients[idx]:.4f})\")\n",
    "\n",
    "print(\"\\nTop 10 features pointing towards class 0:\")\n",
    "for idx in features_class_0:\n",
    "    print(f\"{feature_names[idx]} (Coefficient: {coefficients[idx]:.4f})\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "ff5fd424",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cases with the highest probability of being Class 1 and their corresponding text:\n",
      "                                        clean_semiology  \\\n",
      "82    bilateral tonic clonic seizures onset with vag...   \n",
      "669       vocalization oral automatisms r arm extension   \n",
      "236   convulsion headaches nausea dizziness leading ...   \n",
      "356   behavioral arrest left hand automatisms right ...   \n",
      "468   overwhelming feeling of anxiety beforehand the...   \n",
      "899   body and head turning to the right with left a...   \n",
      "1106                   convulsion without warning month   \n",
      "1117  staring spell with drooling daily convulsions ...   \n",
      "76    generalized tonic clonic seizure absence secon...   \n",
      "199   fas right hand numbness extending from elbow t...   \n",
      "\n",
      "                                     censored_semiology  Probability_0  \\\n",
      "82    bilateral tonic clonic  onset with vague  of n...       0.135492   \n",
      "669       vocalization oral automatisms r arm extension       0.141855   \n",
      "236   convulsion headaches nausea dizziness leading ...       0.144901   \n",
      "356   behavioral arrest left hand automatisms right ...       0.165542   \n",
      "468   overwhelming feeling of anxiety beforehand the...       0.173213   \n",
      "899   body and head turning to the right with left a...       0.191677   \n",
      "1106                   convulsion without warning month       0.199899   \n",
      "1117  staring  with drooling daily convulsions none ...       0.201819   \n",
      "76    generalized tonic clonic  absence seconds blan...       0.203382   \n",
      "199    right hand numbness extending from elbow to h...       0.207559   \n",
      "\n",
      "      Probability_1  Actual_Label  \n",
      "82         0.864508             1  \n",
      "669        0.858145             1  \n",
      "236        0.855099             0  \n",
      "356        0.834458             1  \n",
      "468        0.826787             1  \n",
      "899        0.808323             1  \n",
      "1106       0.800101             1  \n",
      "1117       0.798181             1  \n",
      "76         0.796618             1  \n",
      "199        0.792441             1  \n",
      "Cases with the highest probability of being Class 0 and their corresponding text:\n",
      "                                        clean_semiology  \\\n",
      "464   event description vision will gray out and she...   \n",
      "122   event wakes up from sleep shaking all over ret...   \n",
      "587   feels off wave rushing down her body then full...   \n",
      "400   seizure event descriptions event fias staring ...   \n",
      "14    event average frequency at least every other d...   \n",
      "102   seizure semiology seizure description gtc age ...   \n",
      "177   average frequency once a week last event today...   \n",
      "1010  convulsion with b l shaking sometimes whole bo...   \n",
      "896   burning pain in the back of her head not later...   \n",
      "149   fbtc vs generalized seizure description loc w ...   \n",
      "\n",
      "                                     censored_semiology  Probability_0  \\\n",
      "464    description vision will gray out and she will...       0.723332   \n",
      "122    wakes up from sleep shaking all over retained...       0.710195   \n",
      "587   feels off wave rushing down her body then full...       0.700253   \n",
      "400     descriptions   staring and repeating um then...       0.690101   \n",
      "14     average frequency at least every other day la...       0.684404   \n",
      "102    semiology  description  age at onset during d...       0.655637   \n",
      "177   average frequency once a week last  today subj...       0.649422   \n",
      "1010  convulsion with b l shaking sometimes whole bo...       0.635804   \n",
      "896   burning pain in the back of her head not later...       0.628213   \n",
      "149   f vs generalized  description loc w eyelid flu...       0.623630   \n",
      "\n",
      "      Probability_1  Actual_Label  \n",
      "464        0.276668             0  \n",
      "122        0.289805             1  \n",
      "587        0.299747             0  \n",
      "400        0.309899             1  \n",
      "14         0.315596             0  \n",
      "102        0.344363             0  \n",
      "177        0.350578             0  \n",
      "1010       0.364196             0  \n",
      "896        0.371787             0  \n",
      "149        0.376370             1  \n"
     ]
    }
   ],
   "source": [
    "# see highest prob cases of pnes\n",
    "# Create a DataFrame to store predicted probabilities and original labels\n",
    "predictions_df = pd.DataFrame({'Probability_1': y_probs, 'Probability_0':1-y_probs,'Actual_Label': y_test})\n",
    "\n",
    "# Sort instances based on predicted probabilities (descending order)\n",
    "predictions_df_sorted = predictions_df.sort_values(by='Probability_1', ascending=False)\n",
    "predictions_df_reverse_sorted = predictions_df.sort_values(by='Probability_0', ascending=False)\n",
    "\n",
    "\n",
    "# Display instances with the highest probability\n",
    "top_n = 10  # You can adjust this value to display more or fewer instances\n",
    "top_1_instances = predictions_df_sorted.head(top_n)\n",
    "top_0_instances = predictions_df_reverse_sorted.head(top_n)\n",
    "\n",
    "# Merge the DataFrame containing predicted probabilities with the original DataFrame\n",
    "top_1_instances_with_text = pd.merge(top_1_instances, df, left_index=True, right_index=True)\n",
    "top_0_instances_with_text = pd.merge(top_0_instances, df, left_index=True, right_index=True)\n",
    "\n",
    "\n",
    "# Select relevant columns (e.g., \"cleaner_semiology\", \"Probability_pnes\", \"Actual_Label\")\n",
    "relevant_columns = [\"clean_semiology\",\"censored_semiology\", \"Probability_0\", \"Probability_1\", \"Actual_Label\"]\n",
    "top_1_instances_text = top_1_instances_with_text[relevant_columns]\n",
    "top_0_instances_text = top_0_instances_with_text[relevant_columns]\n",
    "\n",
    "\n",
    "# Display instances with the highest probability of being 0 along with their text\n",
    "print(\"Cases with the highest probability of being Class 1 and their corresponding text:\")\n",
    "print(top_1_instances_text)\n",
    "\n",
    "print(\"Cases with the highest probability of being Class 0 and their corresponding text:\")\n",
    "print(top_0_instances_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "24986a18",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "60249c26",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bec6a50f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8560090e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "009ea0a8",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
